# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from v1 import model_pb2 as v1_dot_model__pb2
from v1 import pdp_adjudication_pb2 as v1_dot_pdp__adjudication__pb2


class AdminAdjudicationServiceStub(object):
    """AdminAdjudicationService adjudicates administrative commands in order as a single transaction. Any error will cause
    the entire transaction to be rolled back.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AdjudicateAdminCmd = channel.unary_unary(
                '/gov.nist.csd.pm.proto.v1.adjudication.AdminAdjudicationService/AdjudicateAdminCmd',
                request_serializer=v1_dot_pdp__adjudication__pb2.AdminCmdRequest.SerializeToString,
                response_deserializer=v1_dot_pdp__adjudication__pb2.AdminCmdResponse.FromString,
                )


class AdminAdjudicationServiceServicer(object):
    """AdminAdjudicationService adjudicates administrative commands in order as a single transaction. Any error will cause
    the entire transaction to be rolled back.
    """

    def AdjudicateAdminCmd(self, request, context):
        """Adjudicate the given admin commands and return a list of the responses in the same order. Commands that do not return
        a value will have an empty value in the response.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminAdjudicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AdjudicateAdminCmd': grpc.unary_unary_rpc_method_handler(
                    servicer.AdjudicateAdminCmd,
                    request_deserializer=v1_dot_pdp__adjudication__pb2.AdminCmdRequest.FromString,
                    response_serializer=v1_dot_pdp__adjudication__pb2.AdminCmdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gov.nist.csd.pm.proto.v1.adjudication.AdminAdjudicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminAdjudicationService(object):
    """AdminAdjudicationService adjudicates administrative commands in order as a single transaction. Any error will cause
    the entire transaction to be rolled back.
    """

    @staticmethod
    def AdjudicateAdminCmd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gov.nist.csd.pm.proto.v1.adjudication.AdminAdjudicationService/AdjudicateAdminCmd',
            v1_dot_pdp__adjudication__pb2.AdminCmdRequest.SerializeToString,
            v1_dot_pdp__adjudication__pb2.AdminCmdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ResourceAdjudicationServiceStub(object):
    """ResourceAdjudicationService adjudicates resource commands and returns a Value if the provided command returns one.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AdjudicateResourceOperation = channel.unary_unary(
                '/gov.nist.csd.pm.proto.v1.adjudication.ResourceAdjudicationService/AdjudicateResourceOperation',
                request_serializer=v1_dot_pdp__adjudication__pb2.ResourceOperationCmd.SerializeToString,
                response_deserializer=v1_dot_model__pb2.Node.FromString,
                )


class ResourceAdjudicationServiceServicer(object):
    """ResourceAdjudicationService adjudicates resource commands and returns a Value if the provided command returns one.
    """

    def AdjudicateResourceOperation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResourceAdjudicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AdjudicateResourceOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.AdjudicateResourceOperation,
                    request_deserializer=v1_dot_pdp__adjudication__pb2.ResourceOperationCmd.FromString,
                    response_serializer=v1_dot_model__pb2.Node.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gov.nist.csd.pm.proto.v1.adjudication.ResourceAdjudicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResourceAdjudicationService(object):
    """ResourceAdjudicationService adjudicates resource commands and returns a Value if the provided command returns one.
    """

    @staticmethod
    def AdjudicateResourceOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gov.nist.csd.pm.proto.v1.adjudication.ResourceAdjudicationService/AdjudicateResourceOperation',
            v1_dot_pdp__adjudication__pb2.ResourceOperationCmd.SerializeToString,
            v1_dot_model__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
